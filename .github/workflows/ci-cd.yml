name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Compile and Run Unit Tests
        run: mvn test -Dtest=unit.**

      - name: Run Integration Tests
        run: mvn test -Dtest=integration.**

      - name: Packaging
        run: mvn clean package

      - name: Crate Jar Artifact
        uses: actions/upload-artifact@v4
        with:
          name: isvalid-api-jar
          path: target/*.jar

  build-and-publish-docker:
    name: Build & Publish Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Baixar artefato do JAR
        uses: actions/download-artifact@v4
        with:
          name: isvalid-api-jar
          path: target

      - name: Login no GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Construir imagem Docker
        run: |
          docker build -t ghcr.io/${{ github.repository }}/isvalid-api:latest .

      - name: Publicar imagem no GitHub Container Registry (GHCR)
        run: |
          docker push ghcr.io/${{ github.repository }}/isvalid-api:latest

  verify-terraform:
    name: Terraform Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infra

      - name: Terraform Plan
        id: plan
        run: terraform plan
        working-directory: ./infra

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        working-directory: ./infra

      - name: Export Terraform Outputs
        run: terraform output -json > terraform-output.json
        working-directory: ./infra

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-output
          path: ./infra/terraform-output.json

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [build-and-publish-docker, verify-terraform ]
    permissions:
      packages: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-output

      - name: Extract Terraform Outputs
        id: extract-outputs
        run: |
          PUBLIC_IP=$(jq -r '.ec2_public_ip.value' terraform-output.json)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Create SSH Key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2-key.pem
          chmod 400 ec2-key.pem

      - name: Deploy to EC2
        env:
          PUBLIC_IP: ${{ env.PUBLIC_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@${{ env.PUBLIC_IP }} << EOF
            # Verificar se o Docker estÃ¡ instalado
            if ! command -v docker &> /dev/null; then
              echo "Docker nÃ£o encontrado. Instalando..."
              sudo yum update -y
              sudo yum install -y docker
              sudo usermod -aG docker ec2-user
              sudo service docker start
              newgrp docker
            else
              echo "Docker jÃ¡ estÃ¡ instalado."
            fi
          
            # Login no GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Verificar se o contÃªiner jÃ¡ existe e removÃª-lo
            if [ \$(docker ps -aq -f name=myapp) ]; then
              echo "ContÃªiner 'myapp' jÃ¡ existe. Removendo..."
              docker rm -f myapp
            fi
          
            # Puxar e rodar a imagem Docker
            docker pull ghcr.io/${{ github.repository }}/isvalid-api:latest
            docker run -d -p 8080:8080 --restart always --name myapp ghcr.io/${{ github.repository }}/isvalid-api:latest
          EOF

      - name: Show Public URL
        run: echo "::notice title=Service URL::http://${{ env.PUBLIC_IP }}:8080/swagger-ui.html"

      - name: Show Public URL in Job Summary
        run: |
          echo "## âœ… Application Deployed Successfully ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ðŸ”— Service URL:** [Swagger Link](http://${{ env.PUBLIC_IP }}:8080/swagger-ui.html)" >> $GITHUB_STEP_SUMMARY

